{"status":{},"contains_secrets":false,"product_version":"3.3.0","spec":{"description":"Runbook to onboard a new tenant project on Calm","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"01_generate_project_code"},{"kind":"app_task","name":"02_create_tenant_project"},{"kind":"app_task","name":"03_clone_template_account"},{"kind":"app_task","name":"04_clone_template_environment"},{"kind":"app_task","name":"05_publish_marketplace_items"},{"kind":"app_task","name":"06_create_ad_objects"}],"name":"aba4a069_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"01_generate_project_code"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"02_create_tenant_project"}},{"from_task_reference":{"kind":"app_task","name":"02_create_tenant_project"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"03_clone_template_account"}},{"from_task_reference":{"kind":"app_task","name":"03_clone_template_account"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"04_clone_template_environment"}},{"from_task_reference":{"kind":"app_task","name":"04_clone_template_environment"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"05_publish_marketplace_items"}},{"from_task_reference":{"kind":"app_task","name":"05_publish_marketplace_items"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"06_create_ad_objects"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"01_generate_project_code","attrs":{"exit_status":[],"script":"# Name: Generate Generate next avialable project code, format P001\n# Task Type: set variable\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 25-09-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\nCODE_PREFIX = 'P'\nCOUNT_DIGITS = 3\n\n\n# -------------- Test Environment ------------------\n# import urllib3\n# urllib3.disable_warnings()\n# authorization = 'Basic YWRtaW46bngyVGVjaDkxMSE='\n# url = 'https:\/\/10.38.12.9:9440\/api\/nutanix\/v3\/{}'\n# project_category = 'PROJECTS'\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_category = '@@{PROJECT_CATEGORY}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\npayload = {'kind': 'category'}\nr = requests.post(url.format('categories\/'+project_category+'\/list'), json=payload, **kwargs)\nproject_code = ''\n\nif r .status_code == 200:\n    current_count = int(r.json()['metadata']['total_matches'])\n    print('INFO - current project code count: {}'.format(current_count))\n    \n    digit_format = '{'+'0:0={}d'.format(COUNT_DIGITS)+'}'\n    next_count = digit_format.format(current_count+1)\n    project_code = '{}{}'.format(CODE_PREFIX, next_count)\n    print('INFO - adding {} to category'.format(project_code))\n\n# if the category key doesn't exist then create it\nif current_count == 0:\n    payload = {'name': project_category}\n    print('INFO - category key is not available, creating it')\n    r = requests.put(url.format('categories\/'+project_category), json=payload, **kwargs)\n    print('INFO - creating category status code: {}'.format(r.status_code))\n\n# adding the new project code to the category\npayload = {'value': project_code}\nr = requests.put(url.format('categories\/'+project_category+'\/'+project_code), json=payload, **kwargs)\n\nprint('PROJECT_CODE={}'.format(project_code))\n","eval_variables":["PROJECT_CODE"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"02_create_tenant_project","attrs":{"exit_status":[],"script":"# Name: Create tenant project and return project uuid\n# Task Type: set variable\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 25-09-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n# from time import sleep\n# import urllib3\n# urllib3.disable_warnings()\n# authorization = 'Basic YWRtaW46bngyVGVjaDkxMSE='\n# url = 'https:\/\/10.38.12.9:9440\/api\/nutanix\/v3\/{}'\n# project_name = 'Tenant A'\n# project_code = 'P003'\n# project_category = 'PROJECTS'\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_name = '@@{PROJECT_NAME}@@'\nproject_code = '@@{PROJECT_CODE}@@'\nproject_category = '@@{PROJECT_CATEGORY}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\npayload = {\n    'spec': {\n        'name': '{}-{}'.format(project_code, project_name),\n        'resources': {\n            'subnet_reference_list': [],\n            'external_user_group_reference_list': [],\n            'user_reference_list': []\n        },\n        'description': 'Project for tenant: {}, using code: {}'.format(project_name, project_code)\n    },\n    'api_version': '3.1.0',\n    'metadata': {\n        'kind': 'project',\n        'spec_version': 0,\n        'owner_reference': {\n            'kind': 'user',\n            'name': 'admin',\n            'uuid': '00000000-0000-0000-0000-000000000000'\n        },\n        'categories': {\n            project_category: project_code\n        }\n    }\n}\n\nr = requests.post(url.format('projects'), json=payload, **kwargs)\n\nif r.status_code == 202:\n    result = r.json()\n    task_uuid = result['status']['execution_context']['task_uuid']\n    task_state = result['status']['state']\n    project_uuid = result['metadata']['uuid']\n    print('INFO - Project created with status code: {}'.format(r.status_code))\n    print('INFO - Project uuid: {}'.format(project_uuid))\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\nelse:\n    print('ERRPR - project creation failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# for for the project task to complete\nwhile task_state == 'PENDING':\n    print('INFO - waiting for 1 sec')\n    sleep(1)\n    r = requests.get(url.format('tasks\/'+task_uuid), **kwargs)\n    task_state = r.json()['status']\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\n\nprint('PROJECT_UUID={}'.format(project_uuid))","eval_variables":["PROJECT_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"03_clone_template_account","attrs":{"script":"# Name: Clone project account and subnets from a reference project template\n# Task Type: Excute\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 25-09-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_template = '@@{PROJECT_TEMPLATE}@@'\nproject_uuid = '@@{PROJECT_UUID}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# find the template project to clone the specs\n# ----------------------------------------------\npayload = {\n    'kind': 'project',\n    'filter': 'name=={}'.format(project_template)\n}\n\nr = requests.post(url.format('projects\/list'), json=payload, **kwargs)\nif r.status_code == 200 and int(r.json()['metadata']['total_matches']):\n    print('INFO - Template project found')\n    template = r.json()['entities'][0]\n    template_uuid = template['metadata']['uuid']\n    account_reference_list = template['spec']['resources']['account_reference_list']\n    default_subnet_reference = template['spec']['resources']['default_subnet_reference']\n    subnet_reference_list = template['spec']['resources']['subnet_reference_list']\n    environment_reference_list = template['spec']['resources']['environment_reference_list']\n    default_environment_uuid = template['spec']['resources']['default_environment_reference'].get('uuid')\n\n    print('INFO - template project uuid: {}'.format(template_uuid))\nelse:\n    print('ERROR - No template project found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# get target project details\n# -----------------------------------------\nprint('INFO - updating target project: {}'.format(project_uuid))\nr = requests.get(url.format('projects\/'+project_uuid), **kwargs)\nproject_spec = r.json()\ndel(project_spec['status'])\nproject_spec['spec']['resources']['account_reference_list'] = account_reference_list\nproject_spec['spec']['resources']['default_subnet_reference'] = default_subnet_reference\nproject_spec['spec']['resources']['subnet_reference_list'] = subnet_reference_list\n\nr = requests.put(url.format('projects\/'+project_uuid), json=project_spec, **kwargs)\n\n\n# check if the update worked\nif r.status_code == 202:\n    result = r.json()\n    task_uuid = result['status']['execution_context']['task_uuid']\n    task_state = result['status']['state']\n    project_uuid = result['metadata']['uuid']\n    print('INFO - Project update with status code: {}'.format(r.status_code))\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\nelse:\n    print('ERRPR - project update failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# for for the project task to complete\nwhile task_state == 'PENDING':\n    print('INFO - waiting for 1 sec')\n    sleep(1)\n    r = requests.get(url.format('tasks\/'+task_uuid), **kwargs)\n    task_state = r.json()['status']\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\n\n\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"04_clone_template_environment","attrs":{"script":"# Name: Clone project enivronment from a reference project template\n# Task Type: Excute\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 25-09-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_template = '@@{PROJECT_TEMPLATE}@@'\nproject_uuid = '@@{PROJECT_UUID}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# find the template project to clone the specs\n# ----------------------------------------------\npayload = {\n    'kind': 'project',\n    'filter': 'name=={}'.format(project_template)\n}\n\nr = requests.post(url.format('projects\/list'), json=payload, **kwargs)\nif r.status_code == 200 and int(r.json()['metadata']['total_matches']):\n    print('INFO - Template project found')\n    template = r.json()['entities'][0]\n    template_uuid = template['metadata']['uuid']\n    account_reference_list = template['spec']['resources']['account_reference_list']\n    default_subnet_reference = template['spec']['resources']['default_subnet_reference']\n    subnet_reference_list = template['spec']['resources']['subnet_reference_list']\n    environment_reference_list = template['spec']['resources']['environment_reference_list']\n    default_environment_uuid = template['spec']['resources']['default_environment_reference'].get('uuid')\n\n    print('INFO - template project uuid: {}'.format(template_uuid))\nelse:\n    print('ERROR - No template project found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# get target project details\n# -----------------------------------------\nprint('INFO - updating target project: {}'.format(project_uuid))\nr = requests.get(url.format('projects\/'+project_uuid), **kwargs)\nproject_spec = r.json()\ndel(project_spec['status'])\n\n# create new environments based on the template\ntarget_environment_list = []\ntarget_default_environment = None\nfor environment in environment_reference_list:\n    print('INFO - creating new environment')\n    r = requests.get(url.format('environments\/'+environment['uuid']), **kwargs)\n    env_spec = r.json()\n    template_env_uuid = env_spec['metadata']['uuid']\n    del(env_spec['status'])\n    new_substrate_list = []\n    for substrate in env_spec['spec']['resources']['substrate_definition_list']:\n        substrate['uuid'] = str(uuid.uuid4())\n        new_substrate_list.append(substrate)\n    \n    env_spec['spec']['resources']['substrate_definition_list'] = new_substrate_list\n    env_spec['metadata'] = {'kind': 'environment', 'name': env_spec['spec']['name'],'project_reference' : {'kind': 'project', 'uuid': project_uuid}}\n    env_spec['spec']['resources']['credential_definition_list'] = [{\n        'name': 'default',\n        'type': 'PASSWORD',\n        'username': 'admin',\n        'secret': {'attrs': {'is_secret_modified': True}, 'value': str(uuid.uuid4())},\n        'uuid': str(uuid.uuid4())\n    }]\n    \n    r = requests.post(url.format('environments'), json=env_spec, **kwargs)\n    if r.status_code == 200:\n        new_env_uuid = r.json()['metadata']['uuid']\n        print('INFO - new environment created with uuid: {}'.format(new_env_uuid))\n        target_environment_list.append({'kind': 'environment', 'uuid':new_env_uuid})\n        if template_env_uuid == default_environment_uuid:\n            target_default_environment = {'kind': 'environment', 'uuid': new_env_uuid}\n\n\n# append the project spec with new environment list\nif len(target_environment_list):\n    project_spec['spec']['resources']['environment_reference_list'] = target_environment_list\nif target_default_environment:\n    project_spec['spec']['resources']['default_environment_reference'] = target_default_environment\n\nr = requests.put(url.format('projects\/'+project_uuid), json=project_spec, **kwargs)\n\n\n# check if the update worked\nif r.status_code == 202:\n    result = r.json()\n    task_uuid = result['status']['execution_context']['task_uuid']\n    task_state = result['status']['state']\n    project_uuid = result['metadata']['uuid']\n    print('INFO - Project update with status code: {}'.format(r.status_code))\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\nelse:\n    print('ERRPR - project update failed, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# for for the project task to complete\nwhile task_state == 'PENDING':\n    print('INFO - waiting for 1 sec')\n    sleep(1)\n    r = requests.get(url.format('tasks\/'+task_uuid), **kwargs)\n    task_state = r.json()['status']\n    print('INFO - task: {}, state: {}'.format(task_uuid, task_state))\n\n\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"05_publish_marketplace_items","attrs":{"script":"# Name: Publish marketplace items based on TEMPLATE project published items\n# Task Type: Excute\n# Script Type: EScript\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n# Date: 25-09-2021\n# Description:\n\nimport requests\n\n# -------------- General settings ------------------\n\n\n\n# -------------- Test Environment ------------------\n\n# -------------- Calm Environment ------------------\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nproject_template = '@@{PROJECT_TEMPLATE}@@'\nproject_uuid = '@@{PROJECT_UUID}@@'\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# find the template project to clone the specs\n# ----------------------------------------------\npayload = {\n    'kind': 'project',\n    'filter': 'name=={}'.format(project_template)\n}\n\nr = requests.post(url.format('projects\/list'), json=payload, **kwargs)\nif r.status_code == 200 and int(r.json()['metadata']['total_matches']):\n    print('INFO - Template project found')\n    template = r.json()['entities'][0]\n    template_uuid = template['metadata']['uuid']\n    print('INFO - Template project uuid: {}'.format(template_uuid))\nelse:\n    print('ERROR - No template project found, stopping, status code: {}, msg: {}'.format(r.status_code, r.content))\n    exit(1)\n\n# get all published items in marketplace\npayload = {\n    'kind': 'marketplace_item',\n    'filter': 'app_state==PUBLISHED'\n}\n\nr = requests.post(url.format('calm_marketplace_items\/list'), json=payload, **kwargs)\nfor item in r.json()['entities']:\n    r = requests.get(url.format('calm_marketplace_items\/'+item['metadata']['uuid']), **kwargs)\n    item_details = r.json()\n    for project in item_details['spec']['resources']['project_reference_list']:\n        if project['uuid'] == template_uuid:\n            print('INFO - Publishing item: {}'.format(item['metadata']['uuid']))\n            del(item_details['status'])\n            item_details['spec']['resources']['project_reference_list'].append({\n                'kind': 'project',\n                'uuid': project_uuid\n            })\n            r = requests.put(url.format('calm_marketplace_items\/'+item['metadata']['uuid']), json=item_details, **kwargs)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_endpoint","name":"POC_AD"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"06_create_ad_objects","attrs":{"script":"\nWrite-Host \"`n====================================================\"\nwrite-Host \"Create OU for new customer\"\nNew-ADOrganizationalUnit -Name \"@@{PROJECT_CODE}@@\" -Path \"@@{AD_PATH}@@\" -PassThru\n\nWrite-Host \"`n====================================================\"\nwrite-Host \"Create new customer owner account\"\nNew-ADUser `\n    -Name \"@@{FIRST_NAME}@@ @@{LAST_NAME}@@\" `\n    -GivenName \"@@{FIRST_NAME}@@\" `\n    -Surname \"@@{LAST_NAME}@@\" `\n    -SamAccountName \"@@{USERNAME}@@\" `\n    -UserPrincipalName \"@@{USERNAME}@@@@@{DOMAIN}@@\" `\n    -Path \"OU=@@{PROJECT_CODE}@@,@@{AD_PATH}@@\" `\n    -AccountPassword(ConvertTo-SecureString -asPlainText -Force -String \"@@{PASSWORD}@@\") `\n    -EmailAddress \"@@{EMAIL}@@\" `\n    -Description \"@@{PROJECT_CODE}@@\" `\n    -Enabled $True -PassThru\n \nWrite-Host \"`n====================================================\"\nwrite-Host \"Create Admins group for the new customer\"\nNew-ADGroup `\n    -Name \"@@{PROJECT_CODE}@@-admins\" `\n    -SamAccountName \"@@{PROJECT_CODE}@@-admins\" `\n    -GroupCategory Security -GroupScope Global `\n    -DisplayName \"@@{PROJECT_CODE}@@ - Admins\" `\n    -Path \"OU=@@{PROJECT_CODE}@@,@@{AD_PATH}@@\" `\n    -PassThru\n\n\nWrite-Host \"`n====================================================\"\nwrite-Host \"add the user to project admin group\"\nAdd-ADGroupMember `\n    -Identity \"@@{PROJECT_CODE}@@-admins\" `\n    -Members \"@@{USERNAME}@@\" `\n    -PassThru\n\n\nWrite-Host \"`n====================================================\"\nwrite-Host \"Create consumers group for the new customer\"\nNew-ADGroup `\n    -Name \"@@{PROJECT_CODE}@@-consumers\" `\n    -SamAccountName \"@@{PROJECT_CODE}@@-consumers\" `\n    -GroupCategory Security -GroupScope Global `\n    -DisplayName \"@@{PROJECT_CODE}@@ - Consumers\" `\n    -Path \"OU=@@{PROJECT_CODE}@@,@@{AD_PATH}@@\" `\n    -PassThru\n\n\nWrite-Host \"`n====================================================\"\nwrite-Host \"Create Operators group for the new customer\"\nNew-ADGroup `\n    -Name \"@@{PROJECT_CODE}@@-operators\" `\n    -SamAccountName \"@@{PROJECT_CODE}@@-operators\" `\n    -GroupCategory Security -GroupScope Global `\n    -DisplayName \"@@{PROJECT_CODE}@@ - Operators\" `\n    -Path \"OU=@@{PROJECT_CODE}@@,@@{AD_PATH}@@\" `\n    -PassThru\n\nexit 0\n","type":"","command_line_args":"","exit_status":[],"script_type":"npsscript"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d7f6bd29_runbook","main_task_local_reference":{"kind":"app_task","name":"aba4a069_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"Select a project name for the tenant project (max 25 alpa numeric chars)","data_type":"BASE","type":"LOCAL","name":"PROJECT_NAME","value":"MoE Project","label":"Project Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"FIRST_NAME","value":"Ahmed","label":"First Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"LAST_NAME","value":"Badawy","label":"Last Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"EMAIL","value":"ahmad@gmail.com","label":"Email","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"USERNAME","value":"ahmed","label":"Username","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"PASSWORD","value":"","label":"Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PROJECT_CATEGORY","value":"PROJECTS","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PROJECT_TEMPLATE","value":"TEMPLATE","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"AD_PATH","value":"OU=TENANTS, DC=demo, DC=lab","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DOMAIN","value":"demo.lab","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Create New Tenant"},"api_version":"3.0","metadata":{"last_update_time":"1632721330775949","kind":"runbook","spec_version":15,"creation_time":"1632669190511612","name":"Create New Tenant"}}